@page "/salvage-board"
@using TowBoatSalvageWebApp.Models
@using TowBoatSalvageWebApp.Services
@inject SalvageTableService TableService
@inject IJSRuntime JS
@implements IAsyncDisposable

<h3>Salvage Dispatch Table</h3>

<!-- Add Column Button -->
<button class="btn btn-primary mb-3" @onclick="ShowAddColumnModal">+ Add Column</button>

<!-- Dynamic Table -->
<table class="table table-bordered">
    <thead>
        <tr>
            @foreach (var col in TableService.Columns)
            {
                <th class="position-relative group">
                    @col.Label
                    <span class="column-type-label">(@col.Type)</span>

                    <!--Three-dot icon -->
                    <button class="menu-btn" @onclick="() => ShowColumnMenu(col.Id)">
                        &#8942;
                    </button>

                    <!-- Column menu -->
                    @if (activeMenuColumnId == col.Id)
                    {
                        <div id="menu-@col.Id" class="column-menu">
                            <button class="dropdown-item" @onclick="() => StartRenameColumn(col.Id)">Rename</button>
                            <button class="dropdown-item text-danger" @onclick="() => DeleteColumn(col.Id)">Delete</button>
                        </div>
                    }
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in TableService.Rows)
        {
            <tr>
                @foreach (var col in TableService.Columns)
                {
                    <td>
                        @RenderCell(row, col)
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<!-- Add Row Button -->
<button class="btn btn-secondary" @onclick="AddRow">+ Add Row</button>

<!-- Modal UI -->
@if (isAddColumnModalOpen)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Column</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <label>Column Label</label>
                    <input class="form-control" @bind="newColumnLabel" />

                    <label class="mt-3">Column Type</label>
                    <select class="form-select" @bind="newColumnType">
                        <option value="Text">Text</option>
                        <option value="Status">Status</option>
                        <option value="Dropdown">Dropdown</option>
                        <option value="Date">Date</option>
                        <option value="Number">Number</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="AddColumn">Add Column</button>
                </div>
            </div>
        </div>
    </div>
}

@if (isRenaming)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Rename Column</h5>
                </div>
                <div class="modal-body">
                    <input class="form-control" @bind="renameText" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => isRenaming = false">Cancel</button>
                    <button class="btn btn-primary" @onclick="RenameColumn">Save</button>
                </div>
            </div>
        </div>
    </div>
}










@code {
    private bool isAddColumnModalOpen = false;
    private string newColumnLabel = string.Empty;
    private string newColumnType = "Text";
    private int? activeMenuColumnId = null;
    private bool isRenaming = false;
    private string renameText = "";
    private int? editingColumndId = null;
    private DotNetObjectReference<SalvageBoard>? dotNetHelper;

    private async Task ShowColumnMenu(int columnId)
    {
        activeMenuColumnId = columnId;
        dotNetHelper = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("registerClickOutside", dotNetHelper, $"menu-{columnId}");
    }

    [JSInvokable]
    public void CloseColumnMenu()
    {
        activeMenuColumnId = null;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        dotNetHelper?.Dispose();
    }


    private void StartRenameColumn(int columnId)
    {
        var col = TableService.Columns.FirstOrDefault(c => c.Id == columnId);
        if (col != null)
        {
            renameText = col.Label;
            isRenaming = true;
            activeMenuColumnId = null;
            editingColumndId = columnId;
        }
    }

    private void RenameColumn()
    {
        var col = TableService.Columns.FirstOrDefault(c => c.Id == editingColumndId);
        if (col != null)
        {
            col.Label = renameText;
        }
        isRenaming = false;
        editingColumndId = null;
    }

    private void DeleteColumn(int columnId)
    {
        TableService.Columns.RemoveAll(c => c.Id == columnId);
        foreach (var row in TableService.Rows)
        {
            row.CellValues.Remove(columnId);
        }
        activeMenuColumnId = null;
    }

    private void ShowAddColumnModal()
    {
        isAddColumnModalOpen = true;
    }

    private void CloseModal()
    {
        newColumnLabel = string.Empty;
        newColumnType = "Text";
        isAddColumnModalOpen = false;
    }

    private void AddColumn()
    {
        if (!string.IsNullOrWhiteSpace(newColumnLabel))
        {
            TableService.AddColumn(newColumnLabel, newColumnType);
        }
        CloseModal();
    }

    private void AddRow()
    {
        TableService.AddRow();
    }

    private RenderFragment RenderCell(SalvageRow row, SalvageColumn col) => builder =>
    {
        builder.OpenElement(0, "div");
        var value = row.CellValues.ContainsKey(col.Id) ? row.CellValues[col.Id] : "";

        switch (col.Type)
        {
            
            case "Status":
            builder.OpenElement(1, "select");
            builder.AddAttribute(2, "class", "form-select");
            builder.AddAttribute(3, "value", value);
            builder.AddAttribute(4, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
            {
            row.CellValues[col.Id] = e.Value?.ToString() ?? "";
            }));
            builder.OpenElement(5, "option"); builder.AddContent(6, "Not Started"); builder.CloseElement();
            builder.OpenElement(7, "option"); builder.AddContent(8, "In Progress"); builder.CloseElement();
            builder.OpenElement(9, "option"); builder.AddContent(10, "Completed"); builder.CloseElement();
            builder.CloseElement();
            break;

            case "Date":
                builder.OpenElement(11, "input");
                builder.AddAttribute(12, "type", "date");
                builder.AddAttribute(13, "class", "form-control");
                builder.AddAttribute(14, "value", value);
                builder.AddAttribute(15, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
                {
                    row.CellValues[col.Id] = e.Value?.ToString() ?? "";
                }));
                builder.CloseElement();
                break;

            case "Number":
                builder.OpenElement(16, "input");
                builder.AddAttribute(17, "type", "number");
                builder.AddAttribute(18, "class", "form-control");
                builder.AddAttribute(19, "value", value);
                builder.AddAttribute(20, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
                {
                    row.CellValues[col.Id] = e.Value?.ToString() ?? "";
                }));
                builder.CloseElement();
                break;

            default: // Text or fallback
                builder.OpenElement(21, "input");
                builder.AddAttribute(22, "type", "text");
                builder.AddAttribute(23, "class", "form-control");
                builder.AddAttribute(24, "value", value);
                builder.AddAttribute(25, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e =>
                {
                    row.CellValues[col.Id] = e.Value?.ToString() ?? "";
                }));
                builder.CloseElement();
                break;
        }
        builder.CloseElement();
    };
}
