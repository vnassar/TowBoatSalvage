@page "/salvage-board"
@using TowBoatSalvageWebApp.Data
@using TowBoatSalvageWebApp.Models
@using TowBoatSalvageWebApp.Services
@using Microsoft.AspNetCore.Components.Forms
@inject SalvageTableService TableService
@inject IJSRuntime JS
@inject IWebHostEnvironment Env

@implements IAsyncDisposable

<link href="~/salvage-board.css" rel="stylesheet" />

@*JS for tooltip*@
<script>
        document.addEventListener("DOMContentLoaded", function() {
        // Handle hovering over input fields
        document.body.addEventListener("mouseenter", function(e) {
            // Check if hovering over an input inside a tooltip container
            const container = e.target.closest('.input-tooltip-container');
            if (container) {
                const tooltip = container.querySelector('.input-tooltip');
                if (tooltip) tooltip.classList.add('active');
            }

            // Also keep tooltip active when hovering the tooltip itself
            if (e.target.classList.contains('input-tooltip') ||
                e.target.closest('.input-tooltip')) {
                const tooltip = e.target.classList.contains('input-tooltip') ?
                                e.target : e.target.closest('.input-tooltip');
                tooltip.classList.add('active');
            }
        }, true);

        // Handle leaving elements
        document.body.addEventListener("mouseleave", function(e) {
            // Only remove active if we're leaving both the input and the tooltip
            const container = e.target.closest('.input-tooltip-container');
            if (container) {
                // Don't remove if entering the tooltip
                if (!e.relatedTarget || !e.relatedTarget.closest('.input-tooltip')) {
                    const tooltip = container.querySelector('.input-tooltip');
                    if (tooltip) tooltip.classList.remove('active');
                }
            }

            // Handle leaving the tooltip itself
            if (e.target.classList.contains('input-tooltip')) {
                // Don't remove if entering the input
                if (!e.relatedTarget || !e.relatedTarget.closest('.input-tooltip-container')) {
                    e.target.classList.remove('active');
                }
            }
        }, true);
    });
</script>

<PageTitle>Dashboard</PageTitle>

@*Dashboard****************@
<div class="dashboard-section">
    <div class="dashboard-header">
        <span class="dashboard-title">Dashboard Overview</span>
        <div class="dashboard-filters">
            <select class="dashboard-select" @bind="selectedYear">
                @foreach (var year in AvailableYears)
                {
                    <option value="@year">@year</option>
                }
            </select>
            <select class="dashboard-select" @bind="selectedMonth">
                <option value="">All Months</option>
                @for (int m = 1; m <= 12; m++)
                {
                    <option value="@m">@MonthName(m)</option>
                }
            </select>
        </div>
    </div>
    <div class="dashboard-stats">
        <div class="dashboard-card">
            <div class="dashboard-card-title">Dispatches</div>
            <div class="dashboard-card-value">@DispatchCount</div>
        </div>
        <div class="dashboard-card">
            <div class="dashboard-card-title">Income</div>
            <div class="dashboard-card-value">$@IncomeTotal.ToString("N2")</div>
        </div>
    </div>
</div>

<h3>Salvage Dispatch Table</h3>
<h3>Developer Mode:</h3>
<p>hoverRow: @hoverRow</p>
<p>@errors</p>
<br />
@* DEBUGGING HERE*@




<!-- Add Column Button -->
<button class="btn btn-primary mb-3" @onclick="ShowAddColumnModal">+ Add Column</button>
<br />

<!-- Dynamic Table -->
<div class="salvage-board">

    <!-- Wrap table in a scrollable container, this before was shrinking and getting to tight/bad UI-->
    <div class="table-container">
        <table class="table table-bordered">
                <thead>
                    <tr>
                        <th class="row-menu-cell">
                            <!--leaving blank for action column-->
                        </th>
                        @foreach (var col in Columns)
                        {

                            <th class="position-relative">
                                <div class="d-flex justify-content-between align-items-center w-100">
                                    <div>
                                        @col.Label
                                        <span class="column-type-label">(@col.Type)</span>
                                    </div>
                                    <!--Three-dot icon -->
                                    <button class="menu-btn" @onclick="() => ShowColumnMenu(col.Id)" @onclick:stopPropagation>
                                        &#8942;
                                    </button>
                                </div>


                                <!-- Column menu -->
                                @if (activeMenuColumnId == col.Id)
                                {
                                    <div id="menu-@col.Id" class="column-menu">
                                        <button class="dropdown-item" @onclick="() => StartRenameColumn(col.Id)">Rename</button>
                                        <button class="dropdown-item text-danger" @onclick="() => DeleteColumn(col.Id)">Delete</button>
                                    </div>
                                }
                            </th>
                        }


                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in Rows)
                    {
                        <tr class="data-row"
                            @onmouseover="@(() => hoverRow = row.Id)"
                            @onmouseout="@(() => hoverRow = null)">

                            <!-- Three-dot menu cell -->
                            <td class="row-menu-cell">
                                <button class="menu-btn"
                                        style="visibility:@((hoverRow == row.Id) ? "visible" : "hidden")"
                                        @onclick="(e => ShowRowMenu(row.Id, e))" @onclick:stopPropagation>
                                    &#8942;
                                </button>
                                <!--Row Menu-->
                                @if (activeRowMenuId == row.Id)
                                {
                                    @*row-menu-dropdown*@
                                    <div id="row-menu-@row.Id" class="row-menu-dropdown">
                                        <button class="dropdown-item" @onclick="() => OpenQuickEntryModal(row.Id)">Quick Entry</button> @*Quick entry => parser here*@
                                        <button class="dropdown-item text-danger" @onclick="() => DeleteRow(row.Id)">Delete Row</button>
                                    </div>
                                }
                            </td>
                            @foreach (var col in Columns)
                            {
                                /*@onmouseover="() => {hoverRow = row.Id; currentHoverRow = row; currentUploadColumn = col;}" @onmouseout="() => hoverRow = null */
                                /*@onmouseleave="() => hoverRow = null"  // remove from under onmousenter because it's breaking the file upload */
                                @if (col.Type == "FileUpload")
                                {
                                    <td class="file-cell">
                                    <span class="file-cell-images">
                                            @* show up to 3 thumbnails *@
                                            @{
                                            var cell = row.Cells.FirstOrDefault(c => c.ColumnId == col.Id);
                                            var files = cell?.Files?.ToList() ?? new List<SalvageFile>();
                                            }

                                            @if (files.Count > 0)
                                            {
                                                var toShow = files.Count > 3 ? files.Take(3) : files;
                                                foreach (var file in toShow)
                                                {
                                                    <span class="thumb-container" style="position:relative; display:inline-block;">
                                                        <img src="@($"/salvage_uploads/{file.FileName}")"
                                                             @onclick="() => OpenGallery(files, file.FileName)"
                                                             class="tiny-thumb" />
                                                    </span>
                                                }
                                                @*If more than3, show +N badge*@
                                                if (files.Count > 3)
                                                {
                                                    <span class="more-badge" @onclick="() => OpenGallery(files, files.First().FileName)">
                                                        +@(files.Count - 3)
                                                    </span>
                                                }
                                            }
                                            @* always show the upload Upload Button on hover *@

                                            <label class="upload-btn" @onclick:stopPropagation>
                                                +
                                                <InputFile OnChange="async e => UploadMultipleFiles(e, row.Id, col.Id)" multiple style="display:none"
                                                           @onclick:stopPropagation />
                                            </label>
                                    </span>
                                </td>
                                }
                                else if (col.Type == "DocumentUpload")
                                {
                                    <td class="file-cell">
                                        <span class="file-cell-images">
                                            @{
                                                var cell = row.Cells.FirstOrDefault(c => c.ColumnId == col.Id);
                                                var files = cell?.Files?.ToList() ?? new List<SalvageFile>();
                                            }
                                            @foreach (var file in files)
                                            {
                                                // for view in browser
                                                // var baseUrl = "https://towboat.vnassar.com";
                                                // var baseUrl = "https://localhost:5010";
                                                var baseUrl = "https://localhost:5010";
                                                var fileUrl = $"{baseUrl}/salvage_uploads/{file.FileName}";
                                                var officeViewerUrl = $"https://view.officeapps.live.com/op/view.aspx?src={Uri.EscapeDataString(fileUrl)}";

                                                <span class="doc-link">
                                                    @if (file.FileType == "application/pdf")
                                                    {
                                                        // direct browser link
                                                        <a href="@($"/salvage_uploads/{file.FileName}")" target="_blank">
                                                            <i class="fade fa-file-pdf-o" style="color:#d32f2f"></i>
                                                            @file.OriginalName
                                                        </a>
                                                    }
                                                    else if (file.FileType == "application/vnd.openxmlformats-officedocument.wordprocessingml.document" ||
                                                    file.FileType == "application/msword" ||
                                                    file.FileType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" ||
                                                    file.FileType == "application/vnd.openxmlformats-officedocument.presentationml.presentation" ||
                                                    file.FileType == "application/vnd.ms-excel")
                                                    {
                                                        // Word, Excel, PowerPoint: Office Online Viewer

                                                        <a href="@officeViewerUrl" target="_blank" rel="noopener">
                                                            <i class="fa fa-file-word-o" style="color:#1976d2"></i>
                                                            @file.OriginalName
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        // Other file types: direct link
                                                        <a href="@($"/salvage_uploads/{file.FileName}")" target="_blank">
                                                            <i class="fa fa-file-o"></i>
                                                            @file.OriginalName
                                                        </a>
                                                    }
                                                </span>

                                            }
                                            <label class="upload-btn" @onclick:stopPropagation>
                                                +
                                                <InputFile OnChange="e => UploadDocumentFiles(e, row.Id, col.Id)" multiple style="display:none" @onclick:stopPropagation />
                                            </label>
                                        </span>
                                    </td>


                                }
                            else if (col.Type == "LongText")
                            {
                                var cell = row.Cells.FirstOrDefault(c => c.ColumnId == col.Id); //figure out where we are 
                                var value = cell?.Value ?? ""; // once we know which cell we are, whats our value? if null make it empty

                                <td class="file-cell">
                                    <span class="input-tooltip-container">
                                        <input class="form-control"
                                            readonly
                                            value="@value"
                                            style="cursor:pointer"
                                            @onclick="() => OpenLongTextModal(row, col)" />
                                        @if (!string.IsNullOrWhiteSpace(value) && value.Length > 15)
                                        {
                                            <span class="input-tooltip">
                                                <div class="tooltip-content">
                                                    @value
                                                </div>
                                            </span>
                                        }
                                    </span>
                                </td>
                            }
                            else
                                {
                                    <td class="file-cell">
                                        <span class="input-tooltip-container">
                                            @RenderCell(row, col)
                                            @{
                                                var cell = row.Cells.FirstOrDefault(c => c.ColumnId == col.Id);
                                                var value = cell?.Value ?? "";
                                            }
                                            @if (!string.IsNullOrWhiteSpace(value) && value.Length > 15)
                                            {
                                                <span class="input-tooltip">
                                                    <span>
                                                        @value
                                                    </span>
                                                </span>
                                            }
                                        </span>
                                    </td>
                                }

                            }

                            
                        </tr>
                    }
                </tbody>
        </table>
    </div>

<!-- Add Row Button -->
<button class="btn btn-secondary" @onclick="AddRow" disabled="@(!Columns.Any())">+ Add Row</button>

<!-- Modal UI -->
@if (isAddColumnModalOpen)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Column</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <label>Column Label</label>
                    <input class="form-control" @bind="newColumnLabel" />

                    <label class="mt-3">Column Type</label>
                    <select class="form-select" @bind="newColumnType">
                        <option value="Text">Text</option>
                        <option value="LongText">Long Text</option>
                        <option value="Status">Status</option>
                        <option value="Dropdown">Dropdown</option>
                        <option value="Date">Date</option>
                        <option value="Number">Number</option>
                        <option value="FileUpload">File Upload</option>
                        <option value="DocumentUpload">Document Upload</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="AddColumn">Add Column</button>
                </div>
            </div>
        </div>
    </div>
}

@if (isRenaming)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Rename Column</h5>
                </div>
                <div class="modal-body">
                    <input class="form-control" @bind="renameText" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => isRenaming = false">Cancel</button>
                    <button class="btn btn-primary" @onclick="RenameColumn">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@if (isGalleryOpen)
{
    <div class="gallery-modal">
        <div class="main-image">
            <img src="@($"/salvage_uploads/{selectedImage}")" />
        </div>
        <div class="sidebar-thumbs">
            @foreach (var img in currentGallery)
            {
                <div class="gallery-thumb-container">
                <img src="@($"/salvage_uploads/{img.FileName}")"
                class="thumb"
                @onclick="() => selectedImage = img.FileName" />
                <button class="delete-gallery-thumb"
                        title="Delete"
                        @onclick="async () => await DeleteFileAsync(img.Id)"
                        @onclick:stopPropagation>
                        ✕
                    </button>
                </div>
            }
        </div>
        <button class="close-btn" @onclick="() => isGalleryOpen = false">×</button>
    </div>
}

@if (isLongTextModalOpen)
    {
        
            <div class="longtext-modal-backdrop"></div>
            <div class="longtext-modal ">
                <div class="longtext-modal-dialog">
                    <div class="longtext-modal-content">
                        <div class="longtext-modal-header">
                            <h5 class="modal-title">Edit Text</h5>
                            <button type="button" class="close-btn" @onclick="CloseLongTextModal">x</button>
                        </div>
                        <div class="longtext-modal-body">
                            <textarea class="form-control"
                                style="min-height:400px; width:100%;font-size:1.1rem"
                                @bind="editingLongText">
                            </textarea>
                        </div>
                        <div class="longtext-modal-footer">
                            <button class="btn btn-secondary" @onclick="CloseLongTextModal">Cancel</button>
                            <button class="btn btn-primary" @onclick="SaveLongTextModal">Save</button>
                        </div>
                    </div>
                </div>
            </div>
    }

@if (isQuickEntryModalOpen)
    {
        <div class="longtext-modal-backdrop"></div>
        <div class="longtext-modal">
            <div class="longtext-modal-dialog">
                <div class="longtext-modal-content">
                    <div class="longtext-modal-header">
                        <h5 class="modal-title">Quick Entry</h5>
                        <button type="button" class="close-btn" @onclick="CloseQuickEntryModal">x</button>
                    </div>
                    <div class="longtext-modal-body">
                        <textarea class="form-control"
                            style="min-height 400px; width:100%;font-size:1.05rem"
                            @bind="quickEntryInput">
                        </textarea>
                        <div class="mt-3">
                            <button class="butn btn-secondary" @onclick="ParseQuickEntry">Parse</button>
                        </div>
                        @if (quickEntry != null)
                        {
                            <div class="mt-4 p-3 border rounded" style="background:#f6f7fb">
                                <b>Preview Parsed Fields:</b>
                                <div>Date: <span>@quickEntry.Date</span></div>
                                <div>Dispatch #: <span>@quickEntry.DispatchNumber</span></div>
                                <div>Claim #: <span>@quickEntry.IncidentNumber</span></div>
                                <div>Make: <span>@quickEntry.Make</span></div>
                                <div>Model: <span>@quickEntry.Model</span></div>
                                <div>Length: <span>@quickEntry.Length</span></div>
                                <div>Member: <span>@quickEntry.CustomerNumber</span></div>
                                <div>Customer Name: <span>@quickEntry.CustomerName</span></div>
                                <div>Phone #: <span>@quickEntry.PhoneNumber</span></div>
                            </div>
                            <button class="btn btn-success mt-3" @onclick="ApplyQuickEntryToRow">Apply Parsed Data</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<br />
<br />
<br />
<br />
<br />
<br />






@code {
    private bool isAddColumnModalOpen = false;
    private string newColumnLabel = string.Empty;
    private string newColumnType = "Text";
    private int? activeMenuColumnId = null;
    private int? activeRowMenuId = null;
    private bool isRenaming = false;
    private string renameText = "";
    private int? editingColumndId = null;
    private DotNetObjectReference<SalvageBoard>? dotNetHelper;
    private bool isGalleryOpen = false;
    private string selectedImage = string.Empty;
    private List<SalvageFile> currentGallery = new();
    private int? hoverRow;
    private string? ErrorMessage;
    private SalvageRow currentHoverRow;
    private SalvageColumn currentUploadColumn;
    private List<SalvageColumn> Columns;
    private List<SalvageRow> Rows;
    private bool isLongTextModalOpen = false;
    private string editingLongText = "";
    private SalvageRow? editingLongTextRow;
    private SalvageColumn? editingLongTextCol;
    private bool isQuickEntryModalOpen = false;
    private int quickEntryRowId;
    private string quickEntryInput = "";
    private QuickEntry? quickEntry;
    private string? errors;

    /*For Stats*/
    private int _selectedYear = DateTime.Now.Year;
    private int? _selectedMonth = null;
    private List<int> AvailableYears = new();
    private int DispatchCount;
    private decimal IncomeTotal;
    private string MonthName(int month) => new DateTime(2000, month, 1).ToString("MMMM");


    /* Setters with logic for stats*/
    private int selectedYear
    {
        get => _selectedYear;
        set
        {
            if (_selectedYear != value)
            {
                _selectedYear = value;
                _ = LoadDashboardStats();
            }
        }
    }

    private int? selectedMonth
{
    get => _selectedMonth;
    set
    {
        if (_selectedMonth != value)
        {
            _selectedMonth = value;
            _ = LoadDashboardStats();
        }
    }
}




    //=========In the beginning! ==============
    protected override async Task OnInitializedAsync()
    {
        await LoadBoardAsync();
        dotNetHelper = DotNetObjectReference.Create(this);

        /*for Stats*/
        //populate yrears 
        int minYear = 2020;
        int maxYear = DateTime.Now.Year;
        AvailableYears = Enumerable.Range(minYear, maxYear - minYear + 1).ToList();
        selectedYear = maxYear;
        selectedMonth = null;
        await LoadDashboardStats();
    }

    private async Task LoadBoardAsync()
    {
        Columns = await TableService.GetColumnAsync();
        Rows = await TableService.GetRowsWithCellAsync();
    }

    private async Task LoadDashboardStats()
    {
        var rows = await TableService.GetRowsWithCellAsync();

        var filtered = rows.Where(r =>
        {
            var dateCell = r.Cells.FirstOrDefault(c => c.Column.Label.Contains("Date", StringComparison.OrdinalIgnoreCase)); // get the cell with the date
            if (dateCell == null || !DateTime.TryParse(dateCell.Value, out var date))
                return false;
            if (date.Year != selectedYear) return false;
            if (selectedMonth.HasValue && date.Month != selectedMonth.Value) return false;
            return true;
        }).ToList();

        DispatchCount = filtered.Count;

        IncomeTotal = filtered
            .Select(r =>
            {
                var incomeCell = r.Cells.FirstOrDefault(c => c.Column.Label.Contains("Invoice", StringComparison.OrdinalIgnoreCase));
                if (incomeCell != null && decimal.TryParse(incomeCell.Value, out var val))
                    return val;
                return 0m;
            }).Sum();
    }

    private async Task OnFilterChanged(ChangeEventArgs e)
    {
        await LoadDashboardStats();
    }

    //========Menu JS Interop ============
    private async Task ShowColumnMenu(int columnId)
    {
        activeMenuColumnId = columnId;

        /*
        * having error with this during file upload
        if (dotNetHelper is null)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            }
        */
                                                                                                                                                                                        await JS.InvokeVoidAsync("registerClickOutside", dotNetHelper, $"menu-{columnId}");

        StateHasChanged();
    }

    private async Task ShowRowMenu(int rowId, MouseEventArgs e)
    {
        activeRowMenuId = rowId;

        /*
        * having error with this during file upload
        if (dotNetHelper is null)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            }
        */
                                                                                                                                                                                        await JS.InvokeVoidAsync("registerClickOutsideRow", dotNetHelper, $"row-menu-{rowId}");

        StateHasChanged();
    }

    [JSInvokable]
    public void CloseColumnMenu()
    {
        activeMenuColumnId = null;
        StateHasChanged();
    }

    [JSInvokable]
    public void CloseRowMenu()
    {
        activeRowMenuId = null;
        StateHasChanged();
    }

    public ValueTask DisposeAsync()
    {
        dotNetHelper?.Dispose();
        return ValueTask.CompletedTask;
    }

    private void ShowRowMenuOld(int rowId, MouseEventArgs e)
    {
        activeRowMenuId = rowId;
        StateHasChanged();
    }

    private void CloseRowMenuOld()
    {
        activeRowMenuId = null;
        StateHasChanged();
    }

    private async Task DeleteRow(int rowId)
    {
        await TableService.DeleteRowAsync(rowId);
        activeRowMenuId = null;
        await LoadBoardAsync(); //needed because it renders again the database, StateHasChanged does not properly update it 

    }

    //===========Column Actions============

    private void StartRenameColumn(int columnId)
    {
        var col = Columns.FirstOrDefault(c => c.Id == columnId);
        if (col != null)
        {
            renameText = col.Label;
            isRenaming = true;
            activeMenuColumnId = null;
            editingColumndId = columnId;
        }
    }

    private async Task RenameColumn()
    {
        if (editingColumndId != null)
        {
            await TableService.RenameColumnAsync(editingColumndId.Value, renameText);
            await LoadBoardAsync();
        }
        isRenaming = false;
        editingColumndId = null;
    }

    private async Task AddColumn()
    {
        if (!string.IsNullOrWhiteSpace(newColumnLabel))
        {
            await TableService.AddColumnAsync(newColumnLabel, newColumnType, Columns.Count);
            await LoadBoardAsync();
        }
        CloseModal();
    }

    private async Task DeleteColumn(int columnId)
    {
        await TableService.DeleteColumnAsync(columnId);
        await LoadBoardAsync();
        activeMenuColumnId = null;
    }

    //=============Modal/UI Logic============
    private void ShowAddColumnModal()
    {
        isAddColumnModalOpen = true;
    }

    private void CloseModal()
    {
        newColumnLabel = string.Empty;
        newColumnType = "Text";
        isAddColumnModalOpen = false;
    }

    //============Row ACtions==============
    private async Task AddRow()
    {
        // first i have to check if any columns exist, otherwise i can create a bunch of extra rows without any columns present, sillY!
        if (!Columns.Any())
        {
            Console.WriteLine("No columns exist!");
            return; // stop and dont do anything if we dont have caolumns!
        }

        await TableService.AddRowAsync();
        await LoadBoardAsync();
    }

    private void OpenLongTextModal(SalvageRow row, SalvageColumn col)
    {
        var cell = row.Cells.FirstOrDefault(c => c.ColumnId == col.Id); 
        editingLongText = cell?.Value ?? ""; // get the cells value, if null, set to empty string
        editingLongTextRow = row; // which row are we in
        editingLongTextCol = col; // which col are we in
        isLongTextModalOpen = true; // our modal can turn visible
    }

    private void CloseLongTextModal()
    {
        isLongTextModalOpen = false; //close our modal
        editingLongText = ""; //clear w/e here
        editingLongTextRow = null; //clear this
        editingLongTextCol = null; //this too
    }

    private async Task SaveLongTextModal()
    {
        if (editingLongText != null && editingLongTextCol != null)
        {
            await TableService.UpdateCellValueAsync(editingLongTextRow.Id, editingLongTextCol.Id, editingLongText); // save
            await LoadBoardAsync(); // then load cells and show new saved value
        }
        CloseLongTextModal(); // close modal after saving and go back to main view
    }

    private void OpenQuickEntryModal(int rowId)
    {
        isQuickEntryModalOpen = true;
        quickEntryRowId = rowId; // what row are we in
        quickEntryInput = "";
        quickEntry = null;
    }

    private void CloseQuickEntryModal()
    {
        isQuickEntryModalOpen = false; //close modal    
        quickEntryInput = ""; // clear this
        quickEntry = null; //clear this
        
    }

    private void ParseQuickEntry()
    {
        quickEntry = new QuickEntry(); // create new object
        var lines = quickEntryInput.Split('\n').Select(line => line.Trim()).Where(line => !string.IsNullOrWhiteSpace(line));

        foreach (var line in lines) // handle each lin
        {
            if (line.StartsWith("Date:", StringComparison.OrdinalIgnoreCase))
                quickEntry.Date = line.Substring("Date:".Length).Trim();
            if (line.StartsWith("Dispatch Number:", StringComparison.OrdinalIgnoreCase))
                quickEntry.DispatchNumber = line.Substring("Dispatch Number:".Length).Trim();
            if (line.StartsWith("Incident number:", StringComparison.OrdinalIgnoreCase))
                quickEntry.IncidentNumber = line.Substring("Incident number:".Length).Trim();
            if (line.StartsWith("Make:", StringComparison.OrdinalIgnoreCase))
                quickEntry.Make = line.Substring("Make:".Length).Trim();
            if (line.StartsWith("Model:", StringComparison.OrdinalIgnoreCase))
                quickEntry.Model = line.Substring("Model:".Length).Trim();
            if (line.StartsWith("Length:", StringComparison.OrdinalIgnoreCase))
                quickEntry.Length = line.Substring("Length:".Length).Trim();
            if (line.StartsWith("Customer number:", StringComparison.OrdinalIgnoreCase))
                quickEntry.CustomerNumber = line.Substring("Customer number:".Length).Trim();
            if (line.StartsWith("Customer Name:", StringComparison.OrdinalIgnoreCase))
                quickEntry.CustomerName = line.Substring("Customer Name:".Length).Trim();
            if (line.StartsWith("Best number to contact:", StringComparison.OrdinalIgnoreCase))
                quickEntry.PhoneNumber = line.Substring("Best number to contact:".Length).Trim();
        }
    }

    private async Task ApplyQuickEntryToRow()
    {
        var row = Rows.FirstOrDefault(r => r.Id == quickEntryRowId);
        if (row != null && quickEntry != null)
        {
            foreach (var col in Columns)
            {
                try
                {
                    if (col.Label.Contains("Date", StringComparison.OrdinalIgnoreCase) && !string.IsNullOrWhiteSpace(quickEntry.Date))
                    {
                        await TableService.UpdateCellValueAsync(row.Id, col.Id, quickEntry.Date);
                    }
                    if (col.Label.Contains("G#", StringComparison.OrdinalIgnoreCase) && !string.IsNullOrWhiteSpace(quickEntry.DispatchNumber))
                    {
                        await TableService.UpdateCellValueAsync(row.Id, col.Id, quickEntry.DispatchNumber);
                    }
                    if (col.Label.Contains("Claim #", StringComparison.OrdinalIgnoreCase) && !string.IsNullOrWhiteSpace(quickEntry.IncidentNumber))
                    {
                        await TableService.UpdateCellValueAsync(row.Id, col.Id, quickEntry.IncidentNumber);
                    }
                    if (col.Label.Contains("Vessel Make", StringComparison.OrdinalIgnoreCase) && !string.IsNullOrWhiteSpace(quickEntry.Make))
                    {
                        await TableService.UpdateCellValueAsync(row.Id, col.Id, quickEntry.Make);
                    }
                    if (col.Label.Contains("Model", StringComparison.OrdinalIgnoreCase) && !string.IsNullOrWhiteSpace(quickEntry.Model))
                    {
                        await TableService.UpdateCellValueAsync(row.Id, col.Id, quickEntry.Model);
                    }
                    if (col.Label.Contains("Vessel Length", StringComparison.OrdinalIgnoreCase) && !string.IsNullOrWhiteSpace(quickEntry.Length))
                    {
                        await TableService.UpdateCellValueAsync(row.Id, col.Id, quickEntry.Length);
                    }
                    if (col.Label.Contains("Member #", StringComparison.OrdinalIgnoreCase) && !string.IsNullOrWhiteSpace(quickEntry.CustomerNumber))
                    {
                        await TableService.UpdateCellValueAsync(row.Id, col.Id, quickEntry.CustomerNumber);
                    }
                    if (col.Label.Contains("Name", StringComparison.OrdinalIgnoreCase) && !string.IsNullOrWhiteSpace(quickEntry.CustomerName))
                    {
                        await TableService.UpdateCellValueAsync(row.Id, col.Id, quickEntry.CustomerName);
                    }
                    if (col.Label.Contains("Phone Number", StringComparison.OrdinalIgnoreCase) && !string.IsNullOrWhiteSpace(quickEntry.PhoneNumber))
                    {
                        await TableService.UpdateCellValueAsync(row.Id, col.Id, quickEntry.PhoneNumber);
                    }
                }
                catch (Exception ex)
                {

                }
                //when done then...
                await LoadBoardAsync();
            }
            // then..
            CloseQuickEntryModal();
        }
    }

    //=============Cell Rendering=============
    private RenderFragment RenderCell(SalvageRow row, SalvageColumn col) => builder =>
    {
        // builder.OpenElement(0, "div");
        //var value = row.CellValues.ContainsKey(col.Id) ? row.CellValues[col.Id] : "";
        var cell = row.Cells.FirstOrDefault(c => c.ColumnId == col.Id);
        var value = cell?.Value ?? "";

        // starting the tooltip container here
       // builder.OpenElement(0, "span");
        //builder.AddAttribute(1, "class", "input-tooltip-container");

        switch (col.Type)
        {
            case "Status":
                builder.OpenElement(0, "select");
                builder.AddAttribute(1, "class", "form-select");
                builder.AddAttribute(2, "value", value);
                builder.AddAttribute(3, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
                {
                    await TableService.UpdateCellValueAsync(row.Id, col.Id, e.Value?.ToString() ?? "");
                    await LoadBoardAsync();
                }));
                builder.OpenElement(4, "option"); builder.AddContent(5, "Not Started"); builder.CloseElement();
                builder.OpenElement(6, "option"); builder.AddContent(7, "In Progress"); builder.CloseElement();
                builder.OpenElement(8, "option"); builder.AddContent(9, "Completed"); builder.CloseElement();
                builder.CloseElement(); // close select
                break;

            case "Date":
                builder.OpenElement(10, "input");
                builder.AddAttribute(11, "type", "date");
                builder.AddAttribute(12, "class", "form-control");
                builder.AddAttribute(13, "value", value);
                builder.AddAttribute(14, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
                {
                    await TableService.UpdateCellValueAsync(row.Id, col.Id, e.Value?.ToString() ?? "");
                    await LoadBoardAsync();
                }));
                builder.CloseElement(); // close input
                break;

            case "Number":
                builder.OpenElement(15, "input");
                builder.AddAttribute(16, "type", "number");
                builder.AddAttribute(17, "class", "form-control");
                builder.AddAttribute(18, "value", value);
                builder.AddAttribute(19, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
                {
                    await TableService.UpdateCellValueAsync(row.Id, col.Id, e.Value?.ToString() ?? "");
                    await LoadBoardAsync();
                }));
                builder.CloseElement(); // close input
                break;

            default: // Text or fallback
                builder.OpenElement(20, "input");
                builder.AddAttribute(21, "type", "text");
                builder.AddAttribute(22, "class", "form-control");
                builder.AddAttribute(23, "value", value);
                builder.AddAttribute(24, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
                {
                    await TableService.UpdateCellValueAsync(row.Id, col.Id, e.Value?.ToString() ?? "");
                    await LoadBoardAsync();
                }));
                builder.CloseElement(); // close input
                break;
        }
    };

    //======================File Upload=============
    private async Task UploadMultipleFiles(InputFileChangeEventArgs e, int rowId, int colId)
    {
        try
        {

            // assume one column per handler' find row and column via a closure or extra fields
            //var row = currentHoverRow; // track which row is hovere/active
            //var col = currentUploadColumn; // and which column the upload button belongs to 
            // ensuring dictionary exists
            /*
            if (!row.CellFiles.ContainsKey(col.Id))
                row.CellFiles[col.Id] = new List<string>();

            */
                                                                                                                                                                                                                                                //ensuring folder exists
            var uploadsFolder = Path.Combine(Env.WebRootPath, "salvage_uploads");

            Directory.CreateDirectory(uploadsFolder);


            foreach (var file in e.GetMultipleFiles())
            {
                var fileName = $"{Guid.NewGuid()}_{file.Name}";
                var path = Path.Combine(uploadsFolder, fileName);

                await using var fs = new FileStream(path, FileMode.Create);
                await file.OpenReadStream(1_000_000_000).CopyToAsync(fs);

                await TableService.AddFileToCellAsync(rowId, colId, fileName, file.Name, "img");
            }
            ErrorMessage = null;
            // hoverRow = null; // clearing which hovered row its at since doing it before this was breaking the upload 
            //not needed now 
            await LoadBoardAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            Console.Error.WriteLine($"Upload failed: {ex}");
            StateHasChanged();
        }
    }

    //== Document Upload==============
    private async Task UploadDocumentFiles(InputFileChangeEventArgs e, int rowId, int colId)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var fileName = $"{Guid.NewGuid()}_{file.Name}";
            var path = Path.Combine(Env.WebRootPath, "salvage_uploads", fileName);
            Directory.CreateDirectory(Path.GetDirectoryName(path)!);

            await using var fs = new FileStream(path, FileMode.Create);
            await file.OpenReadStream(50_000_000).CopyToAsync(fs); // 50mb max

            await TableService.AddFileToCellAsync(rowId, colId, fileName, file.Name, file.ContentType);

        }
        await LoadBoardAsync();
    }

    private void OpenGallery(List<SalvageFile> galleryFiles, string selectedFileName)
    {
        currentGallery = galleryFiles;
        selectedImage = selectedFileName;
        isGalleryOpen = true;
    }

    private async Task DeleteFileAsync(int fileId)
    {
        await TableService.DeleteFileAsync(fileId);
        await LoadBoardAsync();

        //remove from currentGallery and update selectedImage if needed
        currentGallery = currentGallery.Where(f => f.Id != fileId).ToList();
        if (currentGallery.Count == 0)
        {
            isGalleryOpen = false;
        }
        else if (!currentGallery.Any(f => f.FileName == selectedImage))
        {
            selectedImage = currentGallery.First().FileName;
        }
    }

    

    /*
private async Task HandleUpload(InputFileChangeEventArgs e, SalvageRow row, SalvageColumn col)
    {
    try
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var fileName = $"{Guid.NewGuid()}_{file.Name}";
            var uploadPath = Path.Combine(Env.WebRootPath, "salvage_uploads", fileName);

            await using var fs = new FileStream(uploadPath, FileMode.Create);
            await file.OpenReadStream(10_000_000).CopyToAsync(fs);

            // If you want multiple files in the future, use a delimiter or List<string>
                row.CellValues[col.Id] = fileName;
        }
        StateHasChanged();
    }
    catch (Exception ex)
        {
        Console.WriteLine("Upload failed: " + ex.Message);
        }
    }
    */

}
